@model MyOnlineClinic.Web.Models.RegisterViewModel
@{
    ViewBag.Title = "ClinicalDashBoard";
    Layout = "~/Areas/Doctor/Views/Shared/_Doctorlayout.cshtml";
}
<script src="http://code.jquery.com/jquery-1.9.1.js"></script>
<script src="http://code.jquery.com/ui/1.10.3/jquery-ui.js"></script>
<script src="~/Scripts/notify.min.js"></script>

@*<script src="~/Scripts/notify.min.js"></script>*@

@*<script src="~/Scripts/notify.min.js"></script>*@

<div class="col-sm-12">
    @RenderPage("~/Views/Shared/_ClinicalDashboardPartial.cshtml")
</div>

<div id="container" style="width: 75%;">
    <canvas id="canvas"></canvas>
</div>
<button id="randomizeData">Randomize Data</button>
<button id="addDataset">Add Dataset</button>
<button id="removeDataset">Remove Dataset</button>
<button id="addData">Add Data</button>
<button id="removeData">Remove Data</button>

<script src="http://ajax.googleapis.com/ajax/libs/jquery/1.11.0/jquery.min.js"></script>
<script src="/scripts/jquery.plugin.js"></script>
<script src="/scripts/jquery.datepick.js"></script>
<link href="~/Scripts/jquery.datepick.css" rel="stylesheet" />
<script type="text/javascript" language="javscript">



    $(function () {
        $.ajax({
            type: "POST",
            url: '@Url.Action("GetNewConsultationList")',
            data: {},
            datatype: "json",
            success: function (data) {

                var previousConsultTemplate = $('#previousConsultTemplate');
                var dvPreviousConsultations = $('#dvPreviousConsultations');

                if (data != null) {
                    for (var i = 0; i < data.length; i++) {

                        var today = new Date(parseInt(data[i].CreatedDate.substr(6)));
                        var dd = today.getDate();
                        var mm = today.getMonth() + 1; //January is 0!

                        var yyyy = today.getFullYear();
                        if (dd < 10) {
                            dd = '0' + dd
                        }
                        if (mm < 10) {
                            mm = '0' + mm
                        }

                        var SubmitDate = dd + '/' + mm + '/' + yyyy;


                        var previousConsult = previousConsultTemplate.html();
                        previousConsult = previousConsult.replace('¶SubmitDate', SubmitDate);
                        previousConsult = previousConsult.replace('¶Reason', data[i].ReasonForContact);
                        previousConsult = previousConsult.replace('¶Diagnosis', 'Diagnosis1');

                        dvPreviousConsultations.append(previousConsult);
                    }
                }
            },
            error: function () {
            }
        });
    });


    $(document).on('click', '.Regionclick', function (event) {
        event.preventDefault();
        var id = $(this).attr('id');
        id = id.replace('rgn', '');
        $('#hdnRagionId').val(id);
        var name = $(this).attr('data-role');
        getradiology(name);
    })
    var datePickerJquery = jQuery.noConflict();
    var formatOfDate = 'dd/mm/yyyy';
    var controlIds = {
        txtBgBeforBreakfastMin: 'BgBeforBreakfastMin',
        txtBgBeforBreakfastMinRef: $('#BgBeforBreakfastMin'),

        txtBgBeforBreakfastMax: 'BgBeforBreakfastMax',
        txtBgBeforBreakfastMaxRef: $('#BgBeforBreakfastMax'),

        txtBgAfterBreakfastMin: 'BgAfterBreakfastMin',
        txtBgAfterBreakfastMinRef: $('#BgAfterBreakfastMin'),

        txtBgAfterBreakfastMaxMin: 'BgAfterBreakfastMax',
        txtBgAfterBreakfastMaxRef: $('#BgAfterBreakfastMax'),

        txtBgBeforeLunchMin: 'BgBeforeLunchMin',
        txtBgBeforeLunchMinRef: $('#BgBeforeLunchMin'),

        txtBgBeforeLunchMax: 'BgBeforeLunchMax',
        txtBgBeforeLunchMaxRef: $('#BgBeforeLunchMax'),

        txtBgAfterLunchMin: 'BgAfterLunchMin',
        txtBgAfterLunchMinRef: $('#BgAfterLunchMin'),

        txtBgAfterLunchMax: 'BgAfterLunchMax',
        txtBgAfterLunchMaxRef: $('#BgAfterLunchMax'),

        txtBgBeforeDinnerMin: 'BgBeforeDinnerMin',
        txtBgBeforeDinnerMinRef: $('#BgBeforeDinnerMin'),

        txtBgBeforeDinnerMax: 'BgBeforeDinnerMax',
        txtBgBeforeDinnerMaxRef: $('#BgBeforeDinnerMax'),

        txtBgBeforeBedMin: 'BgBeforeBedMin',
        txtBgBeforeBedMinRef: $('#BgBeforeBedMin'),

        txtBgBeforeBedMax: 'BgBeforeBedMax',
        txtBgBeforeBedMaxRef: $('#BgBeforeBedMax'),

        txtBpSystolicMin: 'BpSystolicMin',
        txtBpSystolicMinRef: $('#BpSystolicMin'),

        txtBpSystolicMax: 'BpSystolicMax',
        txtBpSystolicMaxRef: $('#BpSystolicMax'),

        txtBpBeforeBrekfastMin: 'BpBeforeBrekfastMin',
        txtBpBeforeBrekfastMinRef: $('#BpBeforeBrekfastMin'),

        txtBpAfterBrekfastMax: 'BpBeforeBrekfastMax',
        txtBpAfterBrekfastMaxRef: $('#BpBeforeBrekfastMax'),

        txtOxygenMin: 'OxygenMin',
        txtOxygenMinRef: $('#OxygenMin'),

        txtOxygenMax: 'OxygenMax',
        txtOxygenMaxRef: $('#OxygenMax'),

        txtHeartRatemin: 'HeartRatemin',
        txtHeartRateminRef: $('#HeartRatemin'),

        txtHeartRatemax: 'HeartRatemax',
        txtHeartRatemaxRef: $('#HeartRatemax'),

        txtTempMin: 'TempMin',
        txtTempMinRef: $('#TempMin'),

        txtTempMax: 'TempMax',
        txtTempMaxRef: $('#TempMax'),

        txtBMIMin: 'BMIMin',
        txtBMIMinRef: $('#BMIMin'),

        txtBMIMax: 'BMIMax',
        txtBMIMaxRef: $('#BMIMax'),

        txtWeightMin: 'WeightMin',
        txtWeightMinRef: $('#WeightMin'),

        txtTestname: 'Testname',
        txtTestnameRef: $('#Testname'),

        txtfasting: 'fasting',
        txtfastingRef: $('#fasting'),

        txtnonfasting: 'nonfasting',
        txtnonfastingRef: $('#nonfasting'),

        txtcliniclnotes: 'cliniclnotes',
        txtcliniclnotesRef: $('#cliniclnotes'),

        txtinstruction: 'instruction',
        txtinstructionRef: $('#instruction'),

        txturgent: 'urgent',
        txturgentRef: $('#urgent'),
        txtnonurgent: 'nonurgent',
        txtnonurgentRef: $('#nonurgent'),
        txtcopyresult: 'copyresult',
        txtcopyresultRef: $('#copyresult'),
        btnclick: $('#savestandards'),
        hdnfasting: $('#hdnfasting'),
        hdnUrgent: $('#hdnUrgentvalue'),
        hdnActionName: 'hdnActionName',
        hdnActionNameRef: $('#hdnActionName')
    }
    $('#savestandards').click(function () {
        alert("dsf");
        console.log(controlIds);
        $.ajax({
            type: "POST",
            url: '/doctor/ClinicalDashboard/SetStandards',
            data: {
                BloodPressureSystolicMinValue: controlIds.txtBpSystolicMinRef.val(),
                BloodPressureSystolicMaxValue: controlIds.txtBpSystolicMaxRef.val(),
                BloodPressureDiastolicMinValue: controlIds.txtBpBeforeBrekfastMinRef.val(),
                BloodPressureDiastolicMaxValue: controlIds.txtBpAfterBrekfastMaxRef.val(),
                BloodPressureUnit: "mmhg",
                PulseRateMin: controlIds.txtHeartRateminRef.val(),
                PulseRateMax: controlIds.txtHeartRatemaxRef.val(),
                PulseUnit: "Bpm",
                BloodGlucoseBeforeBreakfastMinValue: controlIds.txtBgBeforBreakfastMinRef.val(),
                BloodGlucoseBeforeBreakfastMaxValue: controlIds.txtBgBeforBreakfastMaxRef.val(),
                BloodGlucoseAfterBreakfastMinValue: controlIds.txtBgAfterBreakfastMinRef.val(),
                BloodGlucoseAfterBreakfastMaxValue: controlIds.txtBgAfterBreakfastMaxRef.val(),
                BloodGlucoseBeforeLunchMinValue: controlIds.txtBgBeforeLunchMinRef.val(),
                BloodGlucoseBeforeLunchMaxValue: controlIds.txtBgBeforeLunchMaxRef.val(),
                BloodGlucoseAfterLunchMinValue: controlIds.txtBgAfterLunchMinRef.val(),
                BloodGlucoseAfterLunchMaxValue: controlIds.txtBgAfterLunchMaxRef.val(),
                BloodGlucoseBeforeDinnerMinValue: controlIds.txtBgBeforeDinnerMinRef.val(),
                BloodGlucoseBeforeDinnerMaxValue: controlIds.txtBgBeforeDinnerMaxRef.val(),
                BloodGlucoseBeforeBedMinValue: controlIds.txtBgBeforeBedMinRef.val(),
                BloodGlucoseBeforeBedMaxValue: controlIds.txtBgBeforeBedMaxRef.val(),
                BloodGlucoseUnit: "mmol/l",
                TemperatureMinValue: controlIds.txtTempMinRef.val(),
                TemperatureMaxValue: controlIds.txtTempMaxRef.val(),
                TemperatureUnit: "℃",
                BloodOxygenMinValue: controlIds.txtOxygenMinRef.val(),
                BloodOxygenMaxValue: controlIds.txtOxygenMaxRef.val(),
                BloodOxygenUnit: "%",
                WeightMinValue: controlIds.txtWeightMinRef.val(),
                WeightMaxValue: controlIds.txtWeightMaxRef.val(),
                WeightUnit: "Kg",
                BMIMinValue: controlIds.txtBMIMinRef.val(),
                BMIMaxValue: controlIds.txtBMIMaxRef.val()
            },
            datatype: "json",
            success: function (data) {
                console.log(data);

            },
            error: function () {

            }
        });
    });
    $('#btnSavepathalogy').click(function () {
        alert('ok');
        alert($('#hdnUrgentvalue').val());
        //return;
        //return;
        $.ajax({
            type: "POST",
            url: '/doctor/ClinicalDashboard/Pathology',
            data: {
                TestName: controlIds.txtTestnameRef.val(),
                //controlIds.txtfastingRef.val(),
                FastingNonFastingValue: controlIds.hdnfasting.val(),
                ClinicalNotes: controlIds.txtcliniclnotesRef.val(),
                InstructionForPatient: controlIds.txtinstructionRef.val(),
                Urgent: controlIds.hdnUrgent.val(),
                CopyResultTo: controlIds.txtcopyresultRef.val()
            },
            datatype: "json",
            success: function (data) {
                console.log(data.strfeedback);
                $('#txtFeedback').val(data.strfeedback);
            },
            error: function () {

            }
        });
    });

    $('#lnkFeedback').click(function () {

        $('#feedbackstatus').val('');
        $.ajax({
            type: "POST",
            url: '/doctor/ClinicalDashboard/GetFeedback',
            datatype: "json",
            success: function (data) {
                console.log(data);
                $('#feedbackstatus').val(data);
                $('#txtFeedback').val(data);
            },
            error: function () {

            }
        });
    });
    $('.saveFeedback').click(function () {
        alert($('#txtFeedback').val());
        if ($('#txtFeedback').val() != '') {
            $.ajax({
                type: "POST",
                url: '/doctor/ClinicalDashboard/AddFeedback',
                data: ({ strfeedback: $('#txtFeedback').val(), Status: $('#feedbackstatus').val() }),
                datatype: "json",
                success: function (data) {

                },
                error: function () {

                }
            });
        }
        else {
            alert("plz enter feedback");
        }
    });
    $('#lnkPersonalNotes').click(function () {
        $('#PersonalNotestatus').val('');
        $.ajax({
            type: "POST",
            url: '/doctor/ClinicalDashboard/GetPersonalNote',
            datatype: "json",
            success: function (data) {
                console.log(data);
                $('#PersonalNotestatus').val(data);
                $('#txtNotes').val(data);
            },
            error: function () {


            }
        });
    });
    $('.savePersonal').click(function () {

        if ($('#txtNotes').val() != '') {
            $.ajax({
                type: "POST",
                url: '/doctor/ClinicalDashboard/AddPersonalNote',
                data: ({ strNote: $('#txtNotes').val(), Status: $('#PersonalNotestatus').val() }),
                datatype: "json",
                success: function (data) {

                },
                error: function () {

                }
            });
        }
        else {
            alert("plz enter Notes");
        }
    });
    function setRequestPrint() {

        var hdnRadiology = $('#hdnRadiology');
        var radiology = hdnRadiology.val() == '' ? '' : hdnRadiology.val() + ' ';

        var hdnRegion = $('#hdnRegion');
        var region = hdnRegion.val() == '' ? '' : hdnRegion.val() + ' ';

        var txtRequestToPrint = $('#RequestToPrint');

        var chkLeft = $('#chkLeft');
        var left = '';

        if (chkLeft.is(":checked"))
            left = chkLeft.attr('data-role') + ' ';

        var chkRight = $('#chkRight');
        var right = '';

        if (chkRight.is(":checked"))
            right = chkRight.attr('data-role') + ' ';
        var result = radiology + left + right + region;

        txtRequestToPrint.val(result);
    }
    function getfastingValue(fasting) {
        $('#hdnfasting').val(fasting);
    }
    function getUrgentValue(urgent) {
        $('#hdnUrgentvalue').val(urgent);
    }
    function getregion(RegionName) {
        //alert(RegionName);
        //var varregion = document.getelementbyid(RegionName);
        //varregion = varregion.attr('data-role') + ' ';
        $('#hdnRegion').val(RegionName);
        setRequestPrint();
    }
    function getradiology(RadiologyName) {
        //alert(Radiologyid);
        //var varregion = document.getelementbyid(Radiologyid);
        //varregion = varregion.attr('data-role') + ' ';
        $('#hdnRadiology').val(RadiologyName);
        setRequestPrint();
    }
    function getRadiologyTypeId() {

    }
    $('.SaveRadiology').click(function () {
        //alert("sdsd");
        //alert($('#hdnRagionId').val());
        $.ajax({
            type: "POST",
            url: '/doctor/ClinicalDashboard/AddRadiology',
            data: { RadiologyTypeId: $('#hdnRadiologyTypeId').val(), RegionId: $('#hdnRagionId').val(), RequestPrint: $('#RequestToPrint').val(), ClinicalNotes: $('#ClinicalNotes').val(), CopyResult: $('#CopyResult').val() },
            datatype: "json",
            success: function (data) {

            },
            error: function () {

            }
        });
    });

    //$('.EditRadiology').click(function () {

    //});
    $('.ShowdvAddRadiology').click(function () {
        $('#dvAddRadiology').show();
        $('#dvAddRadiology').removeClass("dvhide").addClass("dvvisibility");
        $('#dvRadiologyList').hide();

    });
    $('.ShowRadiologyList').click(function () {
        $('#dvAddRadiology').hide();
        $('#dvRadiologyList').show();
        $('#dvRadiologyList').removeClass("dvhide").addClass("dvvisibility");
        $('#tblRadiology tbody').html('');
        var tr;
        $.ajax({
            type: "POST",
            url: '/doctor/ClinicalDashboard/GetRadioLogyList',
            //data: ({ DoctorId: 1 }),
            datatype: "json",
            success: function (radiologylist) {

                for (var i = 0; i < radiologylist.length; i++) {
                    tr = $('<tr/>');
                    tr.append("<td>" + radiologylist[i].RadiologyTypeName + "</td>");
                    tr.append("<td>" + radiologylist[i].RegionName + "</td>");
                    tr.append("<td>" + radiologylist[i].RequestPrint + "</td>");
                    tr.append("<td>" + radiologylist[i].ClinicalNotes + "</td>");
                    tr.append("<td>" + radiologylist[i].CopyResult + "</td>");
                    //tr.append("<td><a class='EditRadiology' id='" + radiologylist[i].RadiologyId + "'  href='#' data-toggle='tooltip' data-placement='left'>Edit</a></td>");
                    $('#tblRadiology').append(tr);
                }
            },
            error: function () {
            }
        });
    });
    $('#ShowRadiologyList').click(function () {
        $('#dvAddRadiology').hide();
        $('#dvAddRadiology').removeClass("dvvisibility").addClass("dvhide");
        $('#dvRadiologyList').removeClass("dvvisibility").addClass("dvhide");
        $('#dvRadiologyList').hide();
    });
    $('#lnkRadiology').click(function () {
        $('#dvAddRadiology').hide();
        $('#dvAddRadiology').removeClass("dvvisibility").addClass("dvhide");
        //$('#dvRadiologyList').removeClass("dvvisibility").addClass("dvhide");
        $('#dvRadiologyList').show();
        $('#tblRadiology tbody').html('');
        var tr;
        $.ajax({
            type: "POST",
            url: '/doctor/ClinicalDashboard/GetRadioLogyList',
            //data: ({ DoctorId: 1 }),
            datatype: "json",
            success: function (radiologylist) {

                for (var i = 0; i < radiologylist.length; i++) {
                    tr = $('<tr/>');
                    tr.append("<td>" + radiologylist[i].RadiologyTypeName + "</td>");
                    tr.append("<td>" + radiologylist[i].RegionName + "</td>");
                    tr.append("<td>" + radiologylist[i].RequestPrint + "</td>");
                    tr.append("<td>" + radiologylist[i].ClinicalNotes + "</td>");
                    tr.append("<td>" + radiologylist[i].CopyResult + "</td>");
                    //tr.append("<td><a ><span id='" + radiologylist[i].RadiologyId + "' class='btn btn-default pull-right EditRadiology'>Edit</span></a></td>");
                    $('#tblRadiology').append(tr);
                }
            },
            error: function () {

            }
        });
    });
    $('.ShowdvAddPathology').click(function () {
        $('#dvAddPathology').show();
        $('#dvAddPathology').removeClass("dvhide").addClass("dvvisibility");
        $('#dvPathologyList').hide();

    });
    $('#ShowPathologyList').click(function () {
        $('#dvAddPathology').hide();
        $('#dvAddPathology').removeClass("dvvisibility").addClass("dvhide");
        $('#dvPathologyList').removeClass("dvvisibility").addClass("dvhide");
        $('#dvPathologyList').hide();
    });
    $('.ShowPathologyList').click(function () {
        $('#dvAddPathology').hide();
        $('#dvPathologyList').show();
        $('#dvPathologyList').removeClass("dvhide").addClass("dvvisibility");
        $('#tblPathology tbody').html('');
        var tr1;
        $.ajax({
            type: "POST",
            url: '/doctor/ClinicalDashboard/GetPathologyList',
            //data: ({ DoctorId: 'ECAB4E6D-6167-4CE3-B4F4-94A8534E1486' }),
            datatype: "json",
            success: function (Pathologylist) {
                for (var i = 0; i < Pathologylist.length; i++) {
                    tr1 = $('<tr/>');
                    tr1.append("<td>" + Pathologylist[i].TestName + "</td>");
                    tr1.append("<td>" + Pathologylist[i].FastingNonFastingValue + "</td>");
                    tr1.append("<td>" + Pathologylist[i].ClinicalNotes + "</td>");
                    tr1.append("<td>" + Pathologylist[i].InstructionForPatient + "</td>");
                    tr1.append("<td>" + Pathologylist[i].CopyResultTo + "</td>");
                    tr1.append("<td>" + Pathologylist[i].Urgent + "</td>");
                    //tr1.append("<td><a   data-toggle='tooltip' data-placement='left'>Edit</a></td>");
                    $('#tblPathology').append(tr1);
                    //href=/Doctor/ClinicalDashboard/Pathology/" + Pathologylist[i].PathologyId + "
                }
            },
            error: function () {

            }
        });
    });
    $('#lnkPathology').click(function () {
        $('#dvAddPathology').hide();
        $('#dvAddPathology').removeClass("dvvisibility").addClass("dvhide");
        //$('#dvPathologyList').removeClass("dvvisibility").addClass("dvhide");
        $('#dvPathologyList').show();
        $('#tblPathology tbody').html('');
        var tr1;
        $.ajax({
            type: "POST",
            url: '/doctor/ClinicalDashboard/GetPathologyList',
            //data: ({ DoctorId: 'ECAB4E6D-6167-4CE3-B4F4-94A8534E1486' }),
            datatype: "json",
            success: function (Pathologylist) {
                for (var i = 0; i < Pathologylist.length; i++) {
                    tr1 = $('<tr/>');
                    tr1.append("<td>" + Pathologylist[i].TestName + "</td>");
                    tr1.append("<td>" + Pathologylist[i].FastingNonFastingValue + "</td>");
                    tr1.append("<td>" + Pathologylist[i].ClinicalNotes + "</td>");
                    tr1.append("<td>" + Pathologylist[i].InstructionForPatient + "</td>");
                    tr1.append("<td>" + Pathologylist[i].CopyResultTo + "</td>");
                    tr1.append("<td>" + Pathologylist[i].Urgent + "</td>");
                    //tr1.append("<td><a data-toggle='tooltip' data-placement='left'>Edit</a></td>");
                    $('#tblPathology').append(tr1);
                }
            },
            error: function () {

            }
        });

    });
    $('.lbltype').click(function () {
       
        $("#RegionList").empty();
        var dvRegion = $('#RegionList');
        var d = $(this).attr('id');   

        d = d.replace('rbl', '');
        $('#hdnRadiologyTypeId').val(d);
        $('#RequestToPrint').val($(this).attr('data-role'));
        $.ajax({
            type: "GET",
            url: '/doctor/ClinicalDashboard/GetRegionList',
            data: ({ Id: d }),
            datatype: "json",
            success: function (data) {
                for (var i = 0; i < data.length; i++) {

                    var appendString = '<a id=' + data[i].ReasonId + ' data-role=' + data[i].RadiologyReason + ' class="Regionclick"  href="#" style="display: block;">' + data[i].RadiologyReason + '</a>'
                    dvRegion.append(appendString);
                }

                $('#hdnRadiology').val($(this).attr('data-role'));
                setRequestPrint();

            },
            error: function () {

            }
        });
    });

    $('.btn_search').click(function () {

        $("#lblError").css('display', 'none');
        var btnId = $(this).attr('id');

        var lblTitle = $('#lblTitle');
        lblTitle.html('');

        var dvCreateEditForm = $('#CreateEditForm');
        dvCreateEditForm.html('');

        var template = '';

        switch (btnId) {
            case 'btnBloodPressure':
                controlIds.hdnActionNameRef.val('SaveBloodPressure');

                lblTitle.html('Add Blood Pressure');

                template = $('#bloodPressureTemplate');

                dvCreateEditForm.append(template.html());

                datePickerJquery('#txtBpMeasureDate').datepick({ dateFormat: 'dd/mm/yyyy', maxDate: 0 });
                break;
            case 'btnBloodSugar':
                controlIds.hdnActionNameRef.val('SaveBloodGlucose');

                lblTitle.html('Add Blood Sugar');

                template = $('#bloodSugarTemplate');

                dvCreateEditForm.append(template.html());

                datePickerJquery('#txtBloodSugarMeasureDate').datepick({ dateFormat: 'dd/mm/yyyy', maxDate: 0 });
                break;
            case 'btnOxygen':
                lblTitle.html('Add Blood Oxygen');

                controlIds.hdnActionNameRef.val('SaveOxygen');

                template = $('#bloodOxygenTemplate');

                dvCreateEditForm.append(template.html());

                datePickerJquery('#txtOxygenMeasureDate').datepick({ dateFormat: 'dd/mm/yyyy', maxDate: 0 });
                break;
            case 'btnEcg':
                lblTitle.html('Upload File');

                controlIds.hdnActionNameRef.val('SaveEcg');

                template = $('#ecgTemplate');

                dvCreateEditForm.append(template.html());
                break;
            case 'btnHeartRate':
                controlIds.hdnActionNameRef.val('SaveHeartRate');

                lblTitle.html('Add Heart Rate');

                template = $('#heartRateTemplate');

                dvCreateEditForm.append(template.html());

                datePickerJquery('#txtHeartRateMeasureDate').datepick({ dateFormat: 'dd/mm/yyyy', maxDate: 0 });
                break;
            case 'btnHeight':
                controlIds.hdnActionNameRef.val('SaveHeight');

                lblTitle.html('Add Height');

                template = $('#heightTemplate');

                dvCreateEditForm.append(template.html());

                datePickerJquery('#txtHeightMeasureDate').datepick({ dateFormat: 'dd/mm/yyyy', maxDate: 0 });
                break;
            case 'btnTemperature':
                lblTitle.html('Add Temperature');

                controlIds.hdnActionNameRef.val('SaveTemperature');

                template = $('#temperatureTemplate');

                dvCreateEditForm.append(template.html());

                datePickerJquery('#txtTemperatureMeasureDate').datepick({ dateFormat: 'dd/mm/yyyy', maxDate: 0 });
                break;
            case 'btnWaist':
                lblTitle.html('Add Waist');

                controlIds.hdnActionNameRef.val('SaveWaist');

                template = $('#waistTemplate');

                dvCreateEditForm.append(template.html());

                datePickerJquery('#txtWaistMeasureDate').datepick({ dateFormat: 'dd/mm/yyyy', maxDate: 0 });

                break;
            case 'btnWeight':
                lblTitle.html('Add Weight');

                controlIds.hdnActionNameRef.val('SaveWeight');

                template = $('#weightTemplate');

                dvCreateEditForm.append(template.html());

                datePickerJquery('#txtWeightMeasureDate').datepick({ dateFormat: 'dd/mm/yyyy', maxDate: 0 });
                break;
        }

        var options = {
            "backdrop": "static"
        };
        $('#examinationModal').modal(options);
    });
</script>
<script src="~/Scripts/jquery-2.1.4.min.js"></script>
<script src="~/AdminAssets/js/jquery.ajax.js"></script>
<script src="~/Scripts/notify.js"></script>
<script type="text/javascript">
    var notifyAlert = $.noConflict();
    $('.photo').click(function () {
        var btnId = $(this).attr('id');
        switch (btnId) {
            case 'Uplodefilethroat':
                showCapturePopup(1);
                break;

            case 'UplodefileSkin':
                showCapturePopup(2);
                break;
        }
    });
    $('#btnSaveExamination').click(function () {
        var actionName = controlIds.hdnActionNameRef.val();
        ajaxParam.requestType = 'POST';
        ajaxParam.dataType = 'json';
        var message = '';
        var vailidatorControlId = '';

        if (actionName == 'SaveBloodPressure') {
            var txtBpSystolic = $('#txtBpSystolic');
            var txtBpDiastolic = $('#txtBpDiastolic');
            var txtBpPulse = $('#txtBpPulse');
            var txtBpMeasureDate = $('#txtBpMeasureDate');
            var txtBpMeasurTime = $('#txtBpMeasurTime');
            var ddlBpAmPm = $('#ddlBpAmPm');

            if (txtBpSystolic.val() == '') {
                vailidatorControlId = 'txtBpSystolic';
                message = 'Please enter systolic value';
            }
            else if (txtBpDiastolic.val() == '') {
                vailidatorControlId = 'txtBpDiastolic';
                message = 'Please enter diastolic value';
            }
            else if (txtBpPulse.val() == '') {
                vailidatorControlId = 'txtBpPulse';
                message = 'Please enter pulse value';
            }
            else if (txtBpMeasureDate.val() == '') {
                vailidatorControlId = 'txtBpMeasureDate';
                message = 'Please enter measure date';
            }
            else if (txtBpMeasurTime.val() == '') {
                vailidatorControlId = 'ddlBpAmPm';
                message = 'Please enter measure time';
            }

            ajaxParam.url = '@Url.Action("SaveBloodPressure")';
            ajaxParam.data = {
                SystolicValue: txtBpSystolic.val(),
                DiastolicValue: txtBpDiastolic.val(),
                PulseValue: txtBpPulse.val(),
                MeasureDate: txtBpMeasureDate.val(),
                MeasureTime: txtBpMeasurTime.val(),
                Period: ddlBpAmPm.val()
            };
        }
        else if (actionName == 'SaveBloodGlucose') {
            var txtBloodSugarValue = $('#txtBloodSugarValue');
            var optionBloodSugarMeal = $('radio[name=optionBloodSugarMeal]');
            var ddlBloodSugarTime = $('#ddlBloodSugarTime');
            var txtBloodSugarMeasureDate = $('#txtBloodSugarMeasureDate');
            var txtBloodSugarMeasureTime = $('#txtBloodSugarMeasureTime');
            var ddlBloodSugarAmPm = $('#ddlBloodSugarAmPm');

            if (txtBloodSugarValue.val() == '') {
                vailidatorControlId = 'txtBloodSugarValue';
                message = 'Please enter blood sugar';
            }
            else if (txtBloodSugarMeasureDate.val() == '') {
                vailidatorControlId = 'txtBloodSugarMeasureDate';
                message = 'Please enter measure date';
            }
            else if (txtBloodSugarMeasureTime.val() == '') {
                vailidatorControlId = 'ddlBloodSugarAmPm';
                message = 'Please enter measure time';
            }

            ajaxParam.url = '@Url.Action("SaveBloodGlucose")';
            ajaxParam.data = {
                BloodSugarValue: txtBloodSugarValue.val(),
                MealBeforeAfter: optionBloodSugarMeal.val(),
                MealTime: ddlBloodSugarTime.val(),
                MeasureDate: txtBloodSugarMeasureDate.val(),
                MeasureTime: txtBloodSugarMeasureTime.val(),
                Period: ddlBloodSugarAmPm.val()
            };
        }
        else if (actionName == 'SaveOxygen') {

            var txtOxygenValue = $('#txtOxygenValue');
            var txtOxygenPulseValue = $('#txtOxygenPulseValue');
            var txtOxygenMeasureDate = $('#txtOxygenMeasureDate');
            var txtOxygenMeasureTime = $('#txtOxygenMeasureTime');
            var ddlOxygenAmPm = $('#ddlOxygenAmPm');

            if (txtOxygenValue.val() == '') {
                vailidatorControlId = 'txtOxygenValue';
                message = 'Please enter oxygen value';
            }
            else if (txtOxygenPulseValue.val() == '') {
                vailidatorControlId = 'txtOxygenPulseValue';
                message = 'Please enter pulse value';
            }
            else if (txtOxygenMeasureDate.val() == '') {
                vailidatorControlId = 'txtOxygenMeasureDate';
                message = 'Please enter measure date';
            }
            else if (txtOxygenMeasureTime.val() == '') {
                vailidatorControlId = 'ddlOxygenAmPm';
                message = 'Please enter measure time';
            }

            ajaxParam.url = '@Url.Action("SaveOxygen")';
            ajaxParam.data = {
                OxygenValue: txtOxygenValue.val(),
                PulseValue: txtOxygenPulseValue.val(),
                MeasureDate: txtOxygenMeasureDate.val(),
                MeasureTime: txtOxygenMeasureTime.val(),
                Period: ddlOxygenAmPm.val()
            };
        }
        else if (actionName == 'SaveEcg') {
            var txtEcgSubject = $('#txtEcgSubject');
            var ecgFile = $('#ecgFile');

            if (txtEcgSubject.val() == '') {
                vailidatorControlId = 'txtEcgSubject';
                message = 'Please enter subject';
            }
            else if (ecgFile.val().split('\\').pop() == '') {
                vailidatorControlId = 'ecgFile';
                message = 'Please upload file';
            }

            if (message != '') {
                notifyAlert("#" + vailidatorControlId).notify(message, { position: "right", });
                return;
            }

            var fileUpload = $("#ecgFile").get(0);
            var files = fileUpload.files;

            // Create FormData object
            var fileData = new FormData();

            // Looping over all files and add it to FormData object
            for (var i = 0; i < files.length; i++) {
                fileData.append(files[i].name, files[i]);
            }

            fileData.append('Subject', txtEcgSubject.val());
            fileData.append('EcgThroatFile', ecgFile.val().split('\\').pop());

            $.ajax({
                url: '@Url.Action("SaveEcg")',
                type: "POST",
                contentType: false, // Not to set any content header
                processData: false, // Not to process data
                data: fileData,
                success: function (result) {
                    if (result != null) {
                        $('#examinationModal').modal('hide');
                        if (result.success) {
                            notifyAlert.notify(result.message, "success");
                        }
                        else {
                            notifyAlert.notify("Error Occuured", "error");
                        }
                    }
                },
                error: function (err) {
                    alert(err.statusText);
                }
            });


        }
        else if (actionName == 'SaveHeartRate') {
            var txtHeartRatePulseValue = $('#txtHeartRatePulseValue');
            var txtHeartRateMeasureDate = $('#txtHeartRateMeasureDate');
            var txtHeartRateMeasureTime = $('#txtHeartRateMeasureTime');
            var ddlHeartRateAmPm = $('#ddlHeartRateAmPm');

            if (txtHeartRatePulseValue.val() == '') {
                vailidatorControlId = 'txtHeartRatePulseValue';
                message = 'Please enter pulse value';
            }
            else if (txtHeartRateMeasureDate.val() == '') {
                vailidatorControlId = 'txtHeartRateMeasureDate';
                message = 'Please enter measure date';
            }
            else if (txtHeartRateMeasureTime.val() == '') {
                vailidatorControlId = 'ddlHeartRateAmPm';
                message = 'Please enter measure time';
            }

            ajaxParam.url = '@Url.Action("SaveHeartRate")';
            ajaxParam.data = {
                PulseValue: txtHeartRatePulseValue.val(),
                MeasureDate: txtHeartRateMeasureDate.val(),
                MeasureTime: txtHeartRateMeasureTime.val(),
                Period: ddlHeartRateAmPm.val()
            };
        }
        else if (actionName == 'SaveHeight') {
            var txtHeight = $('#txtHeight');
            var txtHeightMeasureDate = $('#txtHeightMeasureDate');
            var txtHeightMeasureTime = $('#txtHeightMeasureTime');
            var ddlHeightAmPm = $('#ddlHeightAmPm');

            if (txtHeight.val() == '') {
                vailidatorControlId = 'txtHeight';
                message = 'Please enter height';
            }
            else if (txtHeightMeasureDate.val() == '') {
                vailidatorControlId = 'txtHeightMeasureDate';
                message = 'Please enter measure date';
            }
            else if (txtHeightMeasureTime.val() == '') {
                vailidatorControlId = 'ddlHeightAmPm';
                message = 'Please enter measure time';
            }

            ajaxParam.url = '@Url.Action("SaveHeight")';

            ajaxParam.data = {
                Height: txtHeight.val(),
                MeasureDate: txtHeightMeasureTime.val(),
                MeasureTime: txtHeightMeasureTime.val(),
                Period: ddlHeightAmPm.val()
            };
        }
        else if (actionName == 'SaveTemperature') {
            var txtTemperature = $('#txtTemperature');
            var txtTemperatureMeasureDate = $('#txtTemperatureMeasureDate');
            var txtTemperatureMeasureTime = $('#txtTemperatureMeasureTime');
            var ddlTemperatureAmPm = $('#ddlTemperatureAmPm');

            if (txtTemperature.val() == '') {
                vailidatorControlId = 'txtTemperature';
                message = 'Please enter temperature';
            }
            else if (txtTemperatureMeasureDate.val() == '') {
                vailidatorControlId = 'txtTemperatureMeasureDate';
                message = 'Please enter measure date';
            }
            else if (txtTemperatureMeasureTime.val() == '') {
                vailidatorControlId = 'ddlTemperatureAmPm';
                message = 'Please enter measure time';
            }

            ajaxParam.url = '@Url.Action("SaveTemperature")';

            ajaxParam.data = {
                Temperature: txtTemperature.val(),
                MeasureDate: txtTemperatureMeasureDate.val(),
                MeasureTime: txtTemperatureMeasureTime.val(),
                Period: ddlTemperatureAmPm.val()
            };
        }
        else if (actionName == 'SaveWaist') {
            var txtWaist = $('#txtWaist');
            var txtWaistMeasureDate = $('#txtWaistMeasureDate');
            var txtWaistMeasureTime = $('#txtWaistMeasureTime');
            var ddlWaistAmPm = $('#ddlWaistAmPm');

            if (txtWaist.val() == '') {
                vailidatorControlId = 'txtWaist';
                message = 'Please enter waist';
            }
            else if (txtWaistMeasureDate.val() == '') {
                vailidatorControlId = 'txtWaistMeasureDate';
                message = 'Please enter measure date';
            }
            else if (txtWaistMeasureTime.val() == '') {
                vailidatorControlId = 'ddlWaistAmPm';
                message = 'Please enter measure time';
            }

            ajaxParam.url = '@Url.Action("SaveWaist")';

            ajaxParam.data = {
                Waist: txtWaist.val(),
                MeasureDate: txtWaistMeasureDate.val(),
                MeasureTime: txtWaistMeasureTime.val(),
                Period: ddlWaistAmPm.val()
            };
        }
        else if (actionName == 'SaveWeight') {

            var txtWeight = $('#txtWeight');
            var txtWeightMeasureDate = $('#txtWeightMeasureDate');

            if (txtWeight.val() == '') {
                vailidatorControlId = 'txtWeight';
                message = 'Please enter weight';
            }
            else if (txtWeightMeasureDate.val() == '') {
                vailidatorControlId = 'txtWeightMeasureDate';
                message = 'Please enter measure date';
            }

            ajaxParam.url = '@Url.Action("SaveWeight")';

            ajaxParam.data = {
                Weight: txtWeight.val(),
                MeasureDate: txtWeightMeasureDate.val()
            };
        }

        if (message != '') {
            notifyAlert("#" + vailidatorControlId).notify(message, { position: "right", });
            return;
        }

        ajaxParam.successCallbackFunction = successSaveExamination;
        doAjax(ajaxParam);
    });
    function getthis(id) {
        alert(id);
        return;
    }

    function successSaveExamination(data) {
        $('#examinationModal').modal('hide');

        if (data != null) {
            if (data.success) {
                notifyAlert.notify(data.message, "success");
            }
            else {
                notifyAlert.notify("Error Occuured", "error");
            }
        }
    }

    $('#savenewconsult').click(function () {
        
        $.ajax({
            type: "POST",
            url: '/doctor/ClinicalDashboard/SaveNewConsult',
            data: {

                DiagnosisId: 1,
                ReasonForContact: $('#ReasonId').val(),
                Subjective: $('#SubjectiveId').val(),
                Objective: $('#ObjectiveId').val(),
                Assessment: $('#AssessmentId').val(),
                Plans: $('#PlanId').val()
            },
            datatype: "json",
            success: function (data) {

            },
            error: function () {

            }
        });
    });
    function showCapturePopup(id) {
        var doctorid = "1";
        var Patientid = "2";
        window.open('/Doctor/ClinicalDashboard/CheckSkin?id=' + id + "&Doctorid=" + doctorid + "&patientid=" + Patientid, '', 'width=750, height=600,scrollbars=yes,location=0,status=yes');
    }
    function MaskTimeFormat(txtId) {
        var objStartTime = document.getElementById(txtId);
        var strStartTimeValue = objStartTime.value;
        objStartTime.value = GiveCorrectTimeFormat(strStartTimeValue);
    }
    function GiveCorrectTimeFormat(strInputTime) {
        var strReturnValue = "";
        if (strInputTime.length <= 5) {
            strInputTime = strInputTime.replace(":", "");
            //alert(strInputTime);
            if (strInputTime.length == 1) {
                strInputTime = "0" + strInputTime + ":" + "00";
            }
            else if (strInputTime.length == 2) {
                //alert("in 2");
                if (strInputTime <= 23) {
                    strInputTime = strInputTime + ":" + "00";
                }
                else if (strInputTime <= 59) {
                    strInputTime = "00" + ":" + strInputTime;
                }
                else {
                    strInputTime = "00:00"
                }
            }
            else if (strInputTime.length == 3) {
                //alert("in 3");
                if (strInputTime < 959) {
                    //alert(strInputTime.substring(1,3));
                    if (strInputTime.substring(1, 2) <= 5) {
                        strInputTime = "0" + strInputTime.substring(0, 1) + ":" + strInputTime.substring(1, 3);
                    }
                    else {
                        strInputTime = "0" + strInputTime.substring(0, 1) + ":" + "00";
                    }
                }
                else {
                    strInputTime = "0" + strInputTime.substring(0, 1) + ":" + "00";
                }
            }
            else if (strInputTime.length == 4) {
                //alert("in 4");
                if (strInputTime < 2359) {
                    //alert(strInputTime.substring(0,2));
                    if (strInputTime.substring(0, 2) <= 23) {

                        if (strInputTime.substring(2, 3) <= 5) {
                            strInputTime = strInputTime.substring(0, 2) + ":" + strInputTime.substring(2, 4);
                        }
                        else {
                            strInputTime = strInputTime.substring(0, 2) + ":" + "00";
                        }
                    }
                    else {
                        strInputTime = "00:00"
                    }

                }
                else {
                    if (strInputTime.substring(0, 2) <= 23) {
                        if (strInputTime.substring(2, 3) <= 5) {
                            strInputTime = strInputTime.substring(0, 2) + ":" + strInputTime.substring(2, 4);
                        }
                        else {
                            strInputTime = strInputTime.substring(0, 2) + ":" + "00";
                        }
                    }
                    else {
                        strInputTime = "00:00"
                    }
                }
            }
            else {
                strInputTime = "00:00"
            }
            //alert(strInputTime);
            strReturnValue = strInputTime;
            if (strReturnValue == "00:00") {
                strReturnValue = "";
            }
        }
        return strReturnValue;
    }
</script>
<script>
    var browser = navigator.appName;
    function numericOnly(e) {
        var code;

        if (browser == 'Microsoft Internet Explorer')
            code = e.keyCode;
        else //Mozilla/Netscape
            code = e.charCode;

        if ((code >= 48 && code <= 57) || code == 0)
            return true;
        else
            return false;
    }

    function numericWithDotOnly(txtId, e) {
        var code;
        var txt = document.getElementById(txtId).value;

        if (browser == 'Microsoft Internet Explorer')
            code = e.keyCode;
        else //Mozilla/Netscape
            code = e.charCode;

        if (txt.indexOf('.', 0) >= 0 && code == 46) {
            return false;
        }

        if ((code >= 48 && code <= 57) || code == 0 || code == 46)
            return true;
        else
            return false;
    }

    function hideResult() {
        var dvExaminationResult = $('#dvExaminationResult');
        var dvBoxes = $('#dvBoxes');

        dvExaminationResult.css('display', 'none');
        dvBoxes.css('display', 'block');

        var List = $('#List');
        List.html('');
    }

</script>

@*Graph and Chart Work Start Here*@
<script src="~/Scripts/jquery-ui-1.11.4.min.js"></script>

<script type="text/javascript">

   


    var chartJquery = jQuery.noConflict();

    @*var url = '@Url.Action("GetDrugList/")';
    $('#txtSelectDrug').autocomplete({
        
        source: function (request, response) {
            $.ajax({
                url: url,
                //data: { query: request.term },
                dataType: 'json',
                type: 'GET',
                success: function (data) {
                    if (data.length == 0) {
                       // $('#UserorgId').val('');
                        $('#Medication_AmtId').val('');
                        //console.log(0);
                        //console.log($('#UserorgId').val());
                        //console.log($('#OrganizationId').val());
                        return;
                    }

                    response($.map(data, function (item) {
                        return {
                            label: item.MedicationTerm,
                            value: item.Medication_AmtId,                     
                        }
                    }));
                },
                error: function myfunction(err) {
                    console.log("error: autocomplete")
                    console.log(err);
                }
            })
        },
        select: function (event, ui) {

            $('#txtSelectDrug').val(ui.item.label);
            $('#Medication_AmtId').val(ui.item.value);
           
            //$('#UserorgId').val(ui.item.value);

            console.log(1);
            console.log($('#UserorgId').val());
            var dvOrg = $('#dvOrg');

            //var appendString = '<input type="hidden" id="hidorg' + ui.item.value + '" name="hidorg' + ui.item.value + '" value="' + ui.item.value + '"/>';
            //dvOrg.append(appendString);

            //getClinicList();

            return false;
        },
        minLength: 0

    }).focus(function () {
        $(this).autocomplete("search", "");
    });*@
    function getAdminValue(fasting) {
        $('#hdnAdminValue').val(fasting);
    }
    function getPRN(fasting) {
        $('#hdnPRNValue').val(fasting);
    }
    //
    $('#lnkMediacation').click(function ()
    {
        $.ajax({
            type: "POST",
            url: '/doctor/ClinicalDashboard/GetMedication',
            data: { LoginId: $('#LoginId').val() },      
            datatype: "json",
            success: function (medication) {
                //AppointmentId: 0,
                //Medication_AmtId: 0,
                $('#txtTotalStrength').val(medication.strenght),
                $('#txtSpecialConsideration').val(medication.Consideration),
                $('#txtDose').val(Dose),
                $('#txtAuthorityScriptNumber').val(medication.AuthorityScriptNumber),
                $('#txtAuthorityNumber').val(medication.AuthorityNumber),
                $('#hdnPRNValue').val(medication.PRN),
                $('#hdnAdminValue').val(medication.Types),
                $('#ddlFrequency').val(medication.Frequency),
                $('#ddlRoute').val(medication.Rout),
               $('#txtQuantity').val(quantity)
            },
            error: function () {
            }
        });
    });
  
    $(document).on('click', '#btnSaveMedication', function ()
   {     
        $.ajax({
            type: "POST",
            url: '/doctor/ClinicalDashboard/AddMedication',
            data:
                {
                   // PatientLoginid: '00000000-0000-0000-0000-000000000000',
                    // DoctorLoginid: $('#txtSelectDrug').val(),
                  
                    AppointmentId: 0,
                    Medication_AmtId: 0,
                    strenght: $('#txtTotalStrength').val(),
                    Consideration: $('#txtSpecialConsideration').val(),
                    Dose: $('#txtDose').val(),
                    AuthorityScriptNumber: $('#txtAuthorityScriptNumber').val(),
                    AuthorityNumber: $('#txtAuthorityNumber').val(),
                    PRN: $('#hdnPRNValue').val(),
                    Types: $('#hdnAdminValue').val,
                    Frequency: $('#ddlFrequency').val(),
                    Rout: $('#ddlRoute').val(),
                    quantity: $('#txtQuantity').val()
       
                    //Medication_AmtId: $('#txtSelectDrug').val(),
                 
                  
                   
                  //  NooFrepeats: $('#txtNoOfRepeats').val(),
                   // Consideration: $('#txtSelectDrug').val(),
                 //   NoNeeded: $('#txtSelectDrug').val(),
                  //  PbsRpbsValue: $('#txtSelectDrug').val(),
                    //  IsBrandSubstitue 
                   
                   
        //HasPrint 
       // PrinttoAdmin 
      // IsCompleted 
        // RPTNumber 
      //  ScriptId 
        // quantity 
       // Medicineperiod 
      //   RequestType 
       //  QRCodeImage 
     //   BARCodeImage 
     //    AmtMedicationName 
      //  Frequency 
                },
            datatype: "json",
            success: function (data) {

            },
            error: function () {

            }
        });
    });

    $('.lnkExamination').click(function () {
        var ctrId = $(this).attr('id');
        var dvExaminationResult = $('#dvExaminationResult');
        dvExaminationResult.css('display', 'inline');

        var dvBoxes = $('#dvBoxes');
        dvBoxes.css('display', 'none');

        var hdnContorId = $('#hdnContorId');
        hdnContorId.val(ctrId);

        $('#ulExaminationResult a:first').tab('show')
    });

    $('.lnkChart').click(function () {
        var hdnContorId = $('#hdnContorId');

        $('#chartContainer').css('display', 'block');
        $('#graphContainer').css('display', 'none');
        loadChart(hdnContorId.val());
    });

    $('.lnkGraph').click(function () {
        //var hdnContorId = $('#hdnContorId');
        //$('#graphContainer').css('display', 'block');
        //$('#chartContainer').css('display', 'none');
        //loadGraph(hdnContorId.val());

       

    });

    $('.lnkList').click(function () {
        var hdnContorId = $('#hdnContorId');
        $('#graphContainer').css('display', 'none');
        $('#chartContainer').css('display', 'none');
        loadList(hdnContorId.val());
    });

    function loadList(ctrId) {
        var listTitle = '';
        switch (ctrId) {
            case 'lnkBloodPressure':
                ajaxParam.url = '@Url.Action("GetBloodPressure")';
                listTitle = 'Blood Pressure List';
                break;
            case 'lnkBloodGlucose':
                listTitle.url = '@Url.Action("GetBloodGlucose")';
                listTitle = 'Blood Glucose List';
                break;
            case 'lnkOxygen':
                ajaxParam.url = '@Url.Action("GetOxygen")';
                listTitle = 'Oxygen List';
                break;
            case 'lnkBmi':
                ajaxParam.url = '@Url.Action("GetBmi")';
                listTitle = 'BMI List';
                break;
            case 'lnkHeartRate':
                ajaxParam.url = '@Url.Action("GetHeartRate")';
                listTitle = 'Heart Rate List';
                break;
            case 'lnkHeight':
                ajaxParam.url = '@Url.Action("GetHeight")';
                listTitle = 'Height List';
                break;
            case 'lnkTemperature':
                ajaxParam.url = '@Url.Action("GetTemperature")';
                listTitle = 'Temperature List';
                break;
            case 'lnkWaist':
                ajaxParam.url = '@Url.Action("GetWaist")';
                graphTitle = 'Waist List';
                break;
            case 'lnkWeight':
                ajaxParam.url = '@Url.Action("GetWeight")';
                listTitle = 'Weight List';
                break;
        }
        var List = $('#List');
        List.html('');
        List.append('<h3 class="from_title">' + listTitle + '</h3>');

        ajaxParam.requestType = 'POST';
        ajaxParam.dataType = 'json';
        ajaxParam.data = { id: 1 };
        ajaxParam.controlId = ctrId;
        ajaxParam.successCallbackFunction = showList;
        doAjax(ajaxParam);
    }

    function showList(data, controlId) {
        var List = $('#List');        

        switch (controlId) {
            case 'lnkBloodPressure':               
                var bloodPressureListTemplate = $('#bloodPressureListTemplate');               
                List.append(bloodPressureListTemplate.html());
                var tbodybloodPressureList = $('#tbodybloodPressureList');               

                for (var i = 0; i < data.length; i++) {
                    var appendString = '<tr class="odd">' +
                                      '<td class=" ">¶SystolicValue</td>' +
                                      '<td class=" ">¶DiastolicValue</td>' +
                                      '<td class=" ">¶PulseValue</td>' +
                                      '<td class=" ">¶MeasureDate</td>' +
                                      '</tr>';

                    appendString = appendString.replace('¶SystolicValue', data[i].SystolicValue);
                    appendString = appendString.replace('¶DiastolicValue', data[i].DiastolicValue);
                    appendString = appendString.replace('¶PulseValue', data[i].PulseValue);
                    appendString = appendString.replace('¶MeasureDate', data[i].MeasureDate);

                    tbodybloodPressureList.append(appendString);

                }
                break;
            case 'lnkBloodGlucose':
                var bloodGlucoseListTemplate = $('#bloodGlucoseListTemplate');
                List.append(bloodGlucoseListTemplate.html());
                var tbodybloodGlucoseList = $('#tbodybloodGlucoseList');

                for (var i = 0; i < data.length; i++) {
                    var appendString = '<tr class="odd">' +
                                      '<td class=" ">¶BloodSugarValue</td>' +
                                      '<td class=" ">¶MeasureDate</td>' +
                                      '</tr>';

                    appendString = appendString.replace('¶BloodSugarValue', data[i].BloodSugarValue);

                    appendString = appendString.replace('¶MeasureDate', data[i].MeasureDate);

                    tbodybloodGlucoseList.append(appendString);
                }
                break;
            case 'lnkOxygen':
                var oxygenListTemplate = $('#oxygenListTemplate');
                List.append(oxygenListTemplate.html());
                var tbodyOxygenList = $('#tbodyOxygenList');

                for (var i = 0; i < data.length; i++) {
                    var appendString = '<tr class="odd">' +
                                      '<td class=" ">¶OxygenValue</td>' +
                                      '<td class=" ">¶PulseValue</td>' +
                                      '<td class=" ">¶MeasureDate</td>' +
                                      '</tr>';

                    appendString = appendString.replace('¶OxygenValue', data[i].OxygenValue);
                    appendString = appendString.replace('¶PulseValue', data[i].PulseValue);
                    appendString = appendString.replace('¶MeasureDate', data[i].MeasureDate);
                    tbodyOxygenList.append(appendString);
                }
                break;
            case 'lnkBmi':

                break;
            case 'lnkHeartRate':
                var heartRateListTemplate = $('#heartRateListTemplate');
                List.append(heartRateListTemplate.html());
                var tbodyheartRateList = $('#tbodyheartRateList');

                for (var i = 0; i < data.length; i++) {
                    var appendString = '<tr class="odd">' +
                                      '<td class=" ">¶PulseValue</td>' +                                      
                                      '<td class=" ">¶MeasureDate</td>' +
                                      '</tr>';

                    
                    appendString = appendString.replace('¶PulseValue', data[i].PulseValue);
                    appendString = appendString.replace('¶MeasureDate', data[i].MeasureDate);
                    tbodyheartRateList.append(appendString);
                }
                break;
            case 'lnkHeight':
                var heightListTemplate = $('#heightListTemplate');
                List.append(heightListTemplate.html());
                var tbodyheightList = $('#tbodyheightList');

                for (var i = 0; i < data.length; i++) {
                    var appendString = '<tr class="odd">' +
                                      '<td class=" ">¶Height</td>' +
                                      '<td class=" ">¶MeasureDate</td>' +
                                      '</tr>';


                    appendString = appendString.replace('¶Height', data[i].Height);
                    appendString = appendString.replace('¶MeasureDate', data[i].MeasureDate);
                    tbodyheightList.append(appendString);
                }
                break;
            case 'lnkTemperature':
                var tempreatureListTemplate = $('#tempreatureListTemplate');
                List.append(tempreatureListTemplate.html());
                var tbodytempreatureList = $('#tbodytempreatureList');

                for (var i = 0; i < data.length; i++) {
                    var appendString = '<tr class="odd">' +
                                      '<td class=" ">¶Temperature</td>' +
                                      '<td class=" ">¶MeasureDate</td>' +
                                      '</tr>';


                    appendString = appendString.replace('¶Temperature', data[i].Temperature);
                    appendString = appendString.replace('¶MeasureDate', data[i].MeasureDate);
                    tbodytempreatureList.append(appendString);
                }
                break;
            case 'lnkWaist':
                var waistListTemplate = $('#waistListTemplate');
                List.append(waistListTemplate.html());
                var tbodywaistList = $('#tbodywaistList');

                for (var i = 0; i < data.length; i++) {
                    var appendString = '<tr class="odd">' +
                                      '<td class=" ">¶Waist</td>' +
                                      '<td class=" ">¶MeasureDate</td>' +
                                      '</tr>';


                    appendString = appendString.replace('¶Waist', data[i].Waist);
                    appendString = appendString.replace('¶MeasureDate', data[i].MeasureDate);
                    tbodywaistList.append(appendString);
                }
                break;
            case 'lnkWeight':
                var weightListTemplate = $('#weightListTemplate');
                List.append(weightListTemplate.html());
                var tbodyWeightList = $('#tbodyWeightList');

                for (var i = 0; i < data.length; i++) {
                    var appendString = '<tr class="odd">' +
                                      '<td class=" ">¶Weight</td>' +
                                      '<td class=" ">¶MeasureDate</td>' +
                                      '</tr>';

                    appendString = appendString.replace('¶Weight', data[i].Waist);
                    appendString = appendString.replace('¶MeasureDate', data[i].MeasureDate);
                    tbodyWeightList.append(appendString);
                }
                break;
        }
    }


    function loadGraph(ctrId) {
        var graphTitle = '';
        switch (ctrId) {
            case 'lnkBloodPressure':
                ajaxParam.url = '@Url.Action("GetBloodPressure")';
                graphTitle = 'Blood Pressure Graph'
                break;
            case 'lnkBloodGlucose':
                ajaxParam.url = '@Url.Action("GetBloodGlucose")';
                graphTitle = 'Blood Glucose Graph'
                break;
            case 'lnkOxygen':
                ajaxParam.url = '@Url.Action("GetOxygen")';
                graphTitle = 'Oxygen Graph'
                break;
            case 'lnkBmi':
                ajaxParam.url = '@Url.Action("GetBmi")';
                graphTitle = 'BMI Graph'
                break;
            case 'lnkHeartRate':
                ajaxParam.url = '@Url.Action("GetHeartRate")';
                graphTitle = 'Heart Rate Graph'
                break;
            case 'lnkHeight':
                ajaxParam.url = '@Url.Action("GetHeight")';
                graphTitle = 'Height Graph'
                break;
            case 'lnkTemperature':
                ajaxParam.url = '@Url.Action("GetTemperature")';
                graphTitle = 'Temperature Graph'
                break;
            case 'lnkWaist':
                ajaxParam.url = '@Url.Action("GetWaist")';
                graphTitle = 'Waist Graph'
                break;
            case 'lnkWeight':
                ajaxParam.url = '@Url.Action("GetWeight")';
                graphTitle = 'Weight Graph'
                break;
        }

        ajaxParam.requestType = 'POST';
        ajaxParam.dataType = 'json';
        ajaxParam.data = { id: 1 };
        ajaxParam.controlId = graphTitle;
        ajaxParam.successCallbackFunction = showGraph;
        doAjax(ajaxParam);
    }

    function showGraph(data, graphTitle) {
        var objects1 = [];
        var objects2 = [];

        if (graphTitle == 'Blood Pressure Graph') {
            for (var i = 0; i < data.length; i++) {
                objects1[i] = { x: new Date(data[i].MeasureDate), y: data[i].SystolicValue };
            }

            for (var j = 0; j < data.length; j++) {
                objects2[j] = { x: new Date(data[j].MeasureDate), y: data[j].DiastolicValue };
            }
        }
        else if (graphTitle == 'Blood Glucose Graph') {
            for (var i = 0; i < data.length; i++) {
                objects1[i] = { x: new Date(data[i].MeasureDate), y: data[i].BloodSugarValue };
            }
        }

        var chart = new CanvasJS.Chart("graphContainer",
        {
            animationEnabled: true,
            title: {
                text: graphTitle
            },
            data: [
            {
                type: "spline", //change type to bar, line, area, pie, etc
                showInLegend: true,
                dataPoints: objects1
            },
                {
                    type: "spline",
                    showInLegend: true,
                    dataPoints: objects2
                }
            ],
            legend: {
                cursor: "pointer",
                itemclick: function (e) {
                    if (typeof (e.dataSeries.visible) === "undefined" || e.dataSeries.visible) {
                        e.dataSeries.visible = false;
                    } else {
                        e.dataSeries.visible = true;
                    }
                    chart.render();
                }
            }
        });
        chart.render();
    }

    function loadChart(ctrId) {
        var graphTitle = '';
        switch (ctrId) {
            case 'lnkBloodPressure':
                graphTitle = 'Blood Pressure Chart'
                break;
            case 'lnkBloodGlucose':
                graphTitle = 'Blood Glucose Chart'
                break;
            case 'lnkOxygen':
                graphTitle = 'Oxygen Chart'
                break;
            case 'lnkBmi':
                graphTitle = 'BMI Chart'
                break;
            case 'lnkHeartRate':
                graphTitle = 'Heart Rate Chart'
                break;
            case 'lnkHeight':
                graphTitle = 'Height Chart'
                break;
            case 'lnkTemperature':
                graphTitle = 'Temperature Chart'
                break;
            case 'lnkWaist':
                graphTitle = 'Waist Chart'
                break;
            case 'lnkWeight':
                graphTitle = 'Weight Chart'
                break;
        }
        var chart = new CanvasJS.Chart("chartContainer",
		{
		    theme: "theme3",
		    animationEnabled: true,
		    title: {
		        text: graphTitle,
		        fontSize: 30
		    },
		    toolTip: {
		        shared: true
		    },
		    axisY: {
		        title: "Result"
		    },
		    axisY2: {
		        title: "Date"
		    },
		    data: [
			{
			    type: "column",
			    name: "Proven Oil Reserves (bn)",
			    legendText: "Proven Oil Reserves",
			    showInLegend: true,
			    dataPoints: [
				{ label: "Saudi", y: 262 },
				{ label: "Venezuela", y: 211 },
				{ label: "Canada", y: 175 },
				{ label: "Iran", y: 137 },
				{ label: "Iraq", y: 115 },
				{ label: "Kuwait", y: 104 },
				{ label: "UAE", y: 97.8 },
				{ label: "Russia", y: 60 },
				{ label: "US", y: 23.3 },
				{ label: "China", y: 20.4 }
			    ]
			},
			{
			    type: "column",
			    name: "Oil Production (million/day)",
			    legendText: "Oil Production",
			    axisYType: "secondary",
			    showInLegend: true,
			    dataPoints: [
				{ label: "Saudi", y: 11.15 },
				{ label: "Venezuela", y: 2.5 },
				{ label: "Canada", y: 3.6 },
				{ label: "Iran", y: 4.2 },
				{ label: "Iraq", y: 2.6 },
				{ label: "Kuwait", y: 2.7 },
				{ label: "UAE", y: 3.1 },
				{ label: "Russia", y: 10.23 },
				{ label: "US", y: 10.3 },
				{ label: "China", y: 4.3 }

			    ]
			}

		    ],
		    legend: {
		        cursor: "pointer",
		        itemclick: function (e) {
		            if (typeof (e.dataSeries.visible) === "undefined" || e.dataSeries.visible) {
		                e.dataSeries.visible = false;
		            }
		            else {
		                e.dataSeries.visible = true;
		            }
		            chart.render();
		        }
		    },
		});

        chart.render();
    }
</script>
@*Graph and Chart Work End Here*@
<script src="http://cdnjs.cloudflare.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>
<script src="~/Scripts/Chart.bundle.js"></script>
<script>
    var MONTHS = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];

    var randomScalingFactor = function () {
        return (Math.random() > 0.5 ? 1.0 : -1.0) * Math.round(Math.random() * 100);
    };
    var randomColorFactor = function () {
        return Math.round(Math.random() * 255);
    };
    var randomColor = function () {
        return 'rgba(' + randomColorFactor() + ',' + randomColorFactor() + ',' + randomColorFactor() + ',.7)';
    };

    var barChartData = {
        labels: ["January", "February", "March", "April", "May", "June", "July"],
        datasets: [{
            label: 'Dataset 1',
            backgroundColor: "rgba(220,220,220,0.5)",
            data: [randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor()]
        }, {
            hidden: true,
            label: 'Dataset 2',
            backgroundColor: "rgba(151,187,205,0.5)",
            data: [randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor()]
        }, {
            label: 'Dataset 3',
            backgroundColor: "rgba(151,187,205,0.5)",
            data: [randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor()]
        }]

    };

    window.onload = function () {
        var ctx = document.getElementById("canvas").getContext("2d");
        window.myBar = new Chart(ctx, {
            type: 'bar',
            data: barChartData,
            options: {
                // Elements options apply to all of the options unless overridden in a dataset
                // In this case, we are setting the border of each bar to be 2px wide and green
                elements: {
                    rectangle: {
                        borderWidth: 2,
                        borderColor: 'rgb(0, 255, 0)',
                        borderSkipped: 'bottom'
                    }
                },
                responsive: true,
                legend: {
                    position: 'top',
                },
                title: {
                    display: true,
                    text: 'Chart.js Bar Chart'
                }
            }
        });

    };

    $('#randomizeData').click(function () {
        var zero = Math.random() < 0.2 ? true : false;
        $.each(barChartData.datasets, function (i, dataset) {
            dataset.backgroundColor = randomColor();
            dataset.data = dataset.data.map(function () {
                return zero ? 0.0 : randomScalingFactor();
            });

        });
        window.myBar.update();
    });

    $('#addDataset').click(function () {
        var newDataset = {
            label: 'Dataset ' + barChartData.datasets.length,
            backgroundColor: randomColor(),
            data: []
        };

        for (var index = 0; index < barChartData.labels.length; ++index) {
            newDataset.data.push(randomScalingFactor());
        }

        barChartData.datasets.push(newDataset);
        window.myBar.update();
    });

    $('#addData').click(function () {
        if (barChartData.datasets.length > 0) {
            var month = MONTHS[barChartData.labels.length % MONTHS.length];
            barChartData.labels.push(month);

            for (var index = 0; index < barChartData.datasets.length; ++index) {
                //window.myBar.addData(randomScalingFactor(), index);
                barChartData.datasets[index].data.push(randomScalingFactor());
            }

            window.myBar.update();
        }
    });

    $('#removeDataset').click(function () {
        barChartData.datasets.splice(0, 1);
        window.myBar.update();
    });

    $('#removeData').click(function () {
        barChartData.labels.splice(-1, 1); // remove the label first

        barChartData.datasets.forEach(function (dataset, datasetIndex) {
            dataset.data.pop();
        });

        window.myBar.update();
    });
</script>